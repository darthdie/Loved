<?xml version="1.0"?>
<SyntaxDefinition name="Lua" extensions=".lua" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
	<!-- The named colors 'Comment' and 'String' are used in SharpDevelop to detect if a line is inside a multiline string/comment -->
	<Color name="Comment" foreground="Green" exampleText="// comment" />
	<Color name="String" foreground="Blue" exampleText="string text = &quot;Hello, World!&quot;"/>
	<Color name="Char" foreground="Magenta" exampleText="char linefeed = '\n';"/>
	<Color name="Preprocessor" foreground="Green" exampleText="#region Title" />
	<Color name="Punctuation" exampleText="a(b.c);" />
	<Color name="ValueTypes" fontWeight="bold" foreground="Red" exampleText="bool b = true;" />
	<Color name="ReferenceTypes" foreground="Red" exampleText="object o;" />
	<Color name="MethodCall" foreground="MidnightBlue" fontWeight="bold" exampleText="o.ToString();"/>
	<Color name="NumberLiteral" foreground="DarkBlue" exampleText="3.1415f"/>
	<Color name="ThisOrBaseReference" fontWeight="bold" exampleText="this.Do(); base.Do();"/>
	<Color name="NullOrValueKeywords" fontWeight="bold" exampleText="if (value == null)"/>
	<Color name="Keywords" fontWeight="bold" foreground="Blue" exampleText="if (a) {} else {}"/>
	<Color name="GotoKeywords" foreground="Navy" exampleText="continue; return null;"/>
	<Color name="ContextKeywords" foreground="Navy" exampleText="var a = from x in y select z;"/>
	<Color name="ExceptionKeywords" fontWeight="bold" foreground="Teal" exampleText="try {} catch {} finally {}"/>
	<Color name="CheckedKeyword" fontWeight="bold" foreground="DarkGray" exampleText="checked {}"/>
	<Color name="UnsafeKeywords" foreground="Olive" exampleText="unsafe { fixed (..) {} }"/>
	<Color name="OperatorKeywords" fontWeight="bold" foreground="Pink" exampleText="public static implicit operator..."/>
	<Color name="ParameterModifiers" fontWeight="bold" foreground="DeepPink" exampleText="(ref int a, params int[] b)"/>
	<Color name="Modifiers" foreground="Brown" exampleText="static readonly int a;"/>
	<Color name="Visibility" fontWeight="bold" foreground="Blue" exampleText="public override void ToString();"/>
	<Color name="NamespaceKeywords" fontWeight="bold" foreground="Green" exampleText="namespace A.B { using System; }"/>
	<Color name="GetSetAddRemove" foreground="SaddleBrown" exampleText="int Prop { get; set; }"/>
	<Color name="TrueFalse" fontWeight="bold" foreground="DarkCyan" exampleText="b = false; a = true;" />
	<Color name="TypeKeywords" fontWeight="bold" foreground="DarkCyan" exampleText="if (x is int) { a = x as int; type = typeof(int); size = sizeof(int); c = new object(); }"/>

	<!-- This is the main ruleset. -->
	<RuleSet>
    <Span color="Comment" multiline="true">
			<Begin>--\[\[</Begin>
			<End>\]\]</End>
		</Span>
    
		<Span color="Comment">
			<Begin>--</Begin>
		</Span>
		
		<Span color="String">
			<Begin>"</Begin>
			<End>"</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>
		
		<Span color="Char">
			<Begin>'</Begin>
			<End>'</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>
		
		<Span color="String" multiline="true">
			<Begin>\[\[</Begin>
			<End>\]\]</End>
		</Span>
		
		<!-- don't highlight "@int" as keyword -->
		<Rule>
			@[\w\d_]+
		</Rule>
		
		<Keywords color="ThisOrBaseReference">
			<Word>this</Word>
		</Keywords>
		
		<Keywords color="TypeKeywords">
      <Word>function</Word>
		</Keywords>
		
		<Keywords color="TrueFalse">
			<Word>true</Word>
			<Word>false</Word>
		</Keywords>

    <Keywords color="Keywords">
			<Word>and</Word>
			<Word>do</Word>
			<Word>else</Word>
			<Word>elseif</Word>
			<Word>end</Word>
			<Word>for</Word>
			<Word>if</Word>
			<Word>in</Word>
      <Word>not</Word>
      <Word>or</Word>
      <Word>then</Word>
      <Word>while</Word>
      <Word>until</Word>
      <Word>foreach</Word>
      <Word>foreachi</Word>
		</Keywords>
		
		<Keywords color="GotoKeywords">
			<Word>break</Word>
			<Word>return</Word>
      <Word>repeat</Word>
		</Keywords>

    <Keywords color="ContextKeywords">
      <Word>assert</Word>
    </Keywords>

      <!--<Keywords color="ReferenceTypes">
			<Word>class</Word>
			<Word>interface</Word>
			<Word>delegate</Word>
			<Word>object</Word>
			<Word>string</Word>
			<Word>void</Word>
		</Keywords>
		
		<Keywords color="ParameterModifiers">
			<Word>params</Word>
			<Word>ref</Word>
			<Word>out</Word>
		</Keywords>
		
		<Keywords color="Modifiers">
			<Word>abstract</Word>
			<Word>const</Word>
			<Word>event</Word>
			<Word>extern</Word>
			<Word>override</Word>
			<Word>readonly</Word>
			<Word>sealed</Word>
			<Word>static</Word>
			<Word>virtual</Word>
			<Word>volatile</Word>
			<Word>async</Word>
		</Keywords>-->
		
		<Keywords color="Visibility">
      <Word>local</Word>
		</Keywords>
		
		<Keywords color="NullOrValueKeywords">
			<Word>nil</Word>
		</Keywords>
		
		<!-- Mark previous rule-->
		<Rule color="MethodCall">
		\b
		[\d\w_]+  # an identifier
		(?=\s*\() # followed by (
		</Rule>
		
		<!-- Digits -->
		<Rule color="NumberLiteral">
			\b0[xX][0-9a-fA-F]+  # hex number
		|	
			(	\b\d+(\.[0-9]+)?   #number with optional floating point
			|	\.[0-9]+           #or just starting with floating point
			)
			([eE][+-]?[0-9]+)? # optional exponent
		</Rule>
		
		<Rule color="Punctuation">
			[?,.;()\[\]{}+\-/%*&lt;&gt;^+~!|&amp;]+
		</Rule>
	</RuleSet>
</SyntaxDefinition>

